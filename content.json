{"pages":[],"posts":[{"title":"Vue.js - MVVM","text":"MVVM（Model–view–viewmodel）是一種軟體架構模式，其核心是提供對 View 和 View Model 的雙向數據綁定，這使得 View Model 的狀態改變可以自動傳遞給 View，這就是所謂的數據雙向綁定。 為什麼會出現 MVVM？以前最常見的 MVCView 用來把數據以某種方式呈現給用戶Model 其實就是數據Controller 接收並處理來自用戶的請求，並將 Model 返回給用戶 在HTML5 還未火起來的那些年，MVC 做為 Web 應用的最佳實踐是OK的，這是因為 Web 應用的View 層相對來說比較簡單，前端所需要的數據在後端基本上都可以處理好，View 層主要是做一下展示，那時候提倡的是 Controller 來處理複雜的業務邏輯，所以 View 層相對來說比較輕量，就是所謂的 瘦客戶端思想。 為什麼前端要工程化，要是使用MVC？相對 HTML4 ,HTML5 最大的亮點是它為移動設備提供了一些非常有用的功能，使得 HTML5 具備了開發 App 的能力, HTML5 開發 App 最大的好處就是跨平台、快速疊代和上線，節省人力成本和提交效率，因此很多企業開始對傳統的 App 進行改造，逐漸用 H5 代替 Native 頁面，到 2015 年的時候，市面上很多 App 或多或少嵌入都了 H5 頁面。 既然要用H5來構建 App, 那View 層所做的事，就不僅僅是簡單的數據展示了，要管理數據，管理用戶操作的各種狀態，還要處理移動設備上用戶各種操作行為等等。因此，前端也需要一個類似於MVC的框架來管理這些複雜的邏輯，使開發更加高效。 但此時的 MVC 又稍微發了點變化： View UI布局，展示數據Model 管理數據Controller 響應用戶操作，並將 Model 更新到 View 上 這種 MVC 架構模式對於基礎的應用來看起是OK的，更是符合軟體架構的分層思想。 但實際上，隨著H5 的不斷發展，人們更希望使用H5 開發的應用能和Native 媲美，或者接近於原生App 體驗效果，於是前端應用的複雜程度已不同往日，今非昔比。這時前端就暴露了三個重要的痛點問題： 開發者在代碼中大量調用相同的 DOM API, 處理繁瑣 ，操作冗餘，使得代碼難以維護。 大量的DOM 操作使頁面渲染性能降低，加載速度變慢，影響用戶體驗。 當 Model 頻繁發生變化，開發者需要主動更新到View ；當用戶的操作導致 Model 發生變化，開發者同樣需要將變化的數據同步到Model 中，這樣的工作不僅繁瑣，而且很難維護複雜多變的數據狀態。 MVVM 的出現，完美的解決了以上三個問題。MVVM 由 Model,View,ViewModel 三部分組成，Model 層代表數據模型，也可以在Model中定義數據修改和操作的業務邏輯；View 代表UI組件，它負責將數據模型轉化成UI展現出來，ViewModel 是一個同步View 和 Model的對象。 在MVVM架構下，View 和 Model 之間並沒有直接的聯繫，而是通過ViewModel進行交互，Model和ViewModel之間的交互是雙向的， 因此View 數據的變化會同步到Model中，而Model 數據的變化也會立即反應到View上。 ViewModel 通過雙向數據綁定把 View 層和 Model 層連接了起來，而View 和 Model 之間的同步工作完全是自動的，無需人為干涉，因此開發者只需關注業務邏輯，不需要手動操作DOM,不需要關注數據狀態的同步問題，複雜的數據狀態維護完全由 MVVM 來統一管理。","link":"/2020/04/19/Vue.js%20-%20MVVM/"}],"tags":[],"categories":[{"name":"front-end","slug":"front-end","link":"/categories/front-end/"}]}